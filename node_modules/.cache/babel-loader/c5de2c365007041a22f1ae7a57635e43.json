{"ast":null,"code":"var _jsxFileName = \"/Users/bernardoagbranco/github/react-handtrackjs/src/components/Handtrack.js\",\n    _s = $RefreshSig$();\n\nimport * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Handtrack() {\n  _s();\n\n  var video = document.getElementById(\"video\");\n  let myModel = null; //start video stream\n\n  handTrack.startVideo(video); //load tracker model\n\n  const loadTracker = () => {\n    handTrack.load().then(model => {\n      myModel = model;\n      console.log(\"model loaded\");\n      setLoading(1);\n    });\n  }; //run tracker detection\n\n\n  const runTracker = () => {\n    var video = document.getElementById(\"video\");\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext('2d');\n    var mediasource = video;\n\n    if (myModel != null) {\n      myModel.detect(video).then(predictions => {\n        myModel.renderPredictions(predictions, canvas, context, mediasource);\n        requestAnimationFrame(runTracker);\n      });\n    }\n  }; //render tracker results to canvas\n\n\n  const [loading, setLoading] = useState(0);\n\n  const render = () => {\n    if (loading === 0) loadTracker();\n    var video = document.getElementById(\"video\");\n    video.addEventListener('loadeddata', () => {\n      runTracker();\n    });\n    video.removeEventListener('loadeddata', render);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Handtrack, \"v8cXMtzANyY9siEV9ydDIOVgupk=\");\n\n_c = Handtrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Handtrack\");","map":{"version":3,"sources":["/Users/bernardoagbranco/github/react-handtrackjs/src/components/Handtrack.js"],"names":["handTrack","React","useEffect","useState","Handtrack","video","document","getElementById","myModel","startVideo","loadTracker","load","then","model","console","log","setLoading","runTracker","canvas","context","getContext","mediasource","detect","predictions","renderPredictions","requestAnimationFrame","loading","render","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAEhC,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,MAAIC,OAAO,GAAG,IAAd,CAHgC,CAKhC;;AACAR,EAAAA,SAAS,CAACS,UAAV,CAAqBJ,KAArB,EANgC,CAQhC;;AACA,QAAMK,WAAW,GAAG,MAAM;AACtBV,IAAAA,SAAS,CAACW,IAAV,GACKC,IADL,CACUC,KAAK,IAAI;AACXL,MAAAA,OAAO,GAAGK,KAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAC,MAAAA,UAAU,CAAC,CAAD,CAAV;AACH,KALL;AAMH,GAPD,CATgC,CAkBhC;;;AACA,QAAMC,UAAU,GAAG,MAAM;AAErB,QAAIZ,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,QAAIW,MAAM,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,QAAIY,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd;AACA,QAAIC,WAAW,GAAGhB,KAAlB;;AAEA,QAAIG,OAAO,IAAI,IAAf,EAAqB;AACjBA,MAAAA,OAAO,CAACc,MAAR,CAAejB,KAAf,EAAsBO,IAAtB,CAA2BW,WAAW,IAAI;AACtCf,QAAAA,OAAO,CAACgB,iBAAR,CAA0BD,WAA1B,EAAuCL,MAAvC,EAA+CC,OAA/C,EAAwDE,WAAxD;AACAI,QAAAA,qBAAqB,CAACR,UAAD,CAArB;AACH,OAHD;AAKH;AACJ,GAdD,CAnBgC,CAoChC;;;AACA,QAAM,CAACS,OAAD,EAAUV,UAAV,IAAwBb,QAAQ,CAAC,CAAD,CAAtC;;AACA,QAAMwB,MAAM,GAAG,MAAI;AAEf,QAAID,OAAO,KAAK,CAAhB,EAAmBhB,WAAW;AAC9B,QAAIL,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACuB,gBAAN,CAAuB,YAAvB,EAAqC,MAAM;AACvCX,MAAAA,UAAU;AACb,KAFD;AAIAZ,IAAAA,KAAK,CAACwB,mBAAN,CAA0B,YAA1B,EAAwCF,MAAxC;AACH,GATD;;AAWA,sBACI;AAAQ,IAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GApDuBvB,S;;KAAAA,S","sourcesContent":["import * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react'\n\nexport default function Handtrack() {\n\n    var video = document.getElementById(\"video\");\n    let myModel = null;\n\n    //start video stream\n    handTrack.startVideo(video);\n    \n    //load tracker model\n    const loadTracker = () => {\n        handTrack.load()\n            .then(model => {\n                myModel = model;\n                console.log(\"model loaded\");\n                setLoading(1);\n            });\n    }\n\n    //run tracker detection\n    const runTracker = () => {\n\n        var video = document.getElementById(\"video\");\n        var canvas = document.getElementById(\"canvas\");\n        var context = canvas.getContext('2d')\n        var mediasource = video;\n\n        if (myModel != null) {\n            myModel.detect(video).then(predictions => {\n                myModel.renderPredictions(predictions, canvas, context, mediasource);\n                requestAnimationFrame(runTracker);\n            });\n\n        }\n    }\n\n\n    //render tracker results to canvas\n    const [loading, setLoading] = useState(0);\n    const render = ()=>{\n\n        if (loading === 0) loadTracker();\n        var video = document.getElementById(\"video\");\n        video.addEventListener('loadeddata', () => {\n            runTracker();\n        })\n\n        video.removeEventListener('loadeddata', render);\n    }\n\n    return (\n        <canvas id=\"canvas\"></canvas>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}