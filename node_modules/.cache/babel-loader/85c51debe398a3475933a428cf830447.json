{"ast":null,"code":"const fragmentShader = `\nprecision mediump float;\n\tuniform float u_time;\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform sampler2D u_texture;\n\tvarying vec2 vUv;\n\n\tfloat random (in vec2 st) {\n\t\treturn fract(sin(dot(st.xy,\n\t\t\t\t\t\t\t vec2(12.9898,78.233)))\n\t\t\t\t\t* 43758.5453123);\n\t}\n\t\n\t// Value noise by Inigo Quilez - iq/2013\n\t// https://www.shadertoy.com/view/lsf3WH\n\tfloat noise(vec2 st) {\n\t\tvec2 i = floor(st);\n\t\tvec2 f = fract(st);\n\t\tvec2 u = f*f*(3.0-2.0*f);\n\t\treturn mix( mix( random( i + vec2(0.0,0.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,0.0) ), u.x),\n\t\t\t\t\tmix( random( i + vec2(0.0,1.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,1.0) ), u.x), u.y);\n\t}\n\n\tvec2 displace( vec2 uv, in float offset )\n\t{\n    uv.x += 0.1*sin( u_time + 2.0*uv.y ) ;\n    uv.y += 0.1*sin( u_time + 2.0*uv.x ) ;\n    \n    float a = noise(uv*1.5+sin(0.1*u_time))*6.2831;\n    a += offset;\n    return vec2( cos(a), sin(a) );\n\t}\n\n\tvoid main() {\n\t\n\t//vertex coordinates from vertex shader\n\tvec2 uv = vUv;\n\n\tfloat offset = u_time + gl_FragCoord.x/u_resolution.y;\n    vec2 displacement = displace(uv*10., offset*3.0 );\n    uv += 0.015*displacement;\n\n    //import texture and give it displacement effect\n\tvec4 texture = texture2D(u_texture, uv);\n\n\t//output result\n\tgl_FragColor = vec4(texture);\n}\n`;\nexport { fragmentShader };","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/fragmentShader.js"],"names":["fragmentShader"],"mappings":"AAAA,MAAMA,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnDA;AAoDA,SACIA,cADJ","sourcesContent":["const fragmentShader = `\nprecision mediump float;\n\tuniform float u_time;\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform sampler2D u_texture;\n\tvarying vec2 vUv;\n\n\tfloat random (in vec2 st) {\n\t\treturn fract(sin(dot(st.xy,\n\t\t\t\t\t\t\t vec2(12.9898,78.233)))\n\t\t\t\t\t* 43758.5453123);\n\t}\n\t\n\t// Value noise by Inigo Quilez - iq/2013\n\t// https://www.shadertoy.com/view/lsf3WH\n\tfloat noise(vec2 st) {\n\t\tvec2 i = floor(st);\n\t\tvec2 f = fract(st);\n\t\tvec2 u = f*f*(3.0-2.0*f);\n\t\treturn mix( mix( random( i + vec2(0.0,0.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,0.0) ), u.x),\n\t\t\t\t\tmix( random( i + vec2(0.0,1.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,1.0) ), u.x), u.y);\n\t}\n\n\tvec2 displace( vec2 uv, in float offset )\n\t{\n    uv.x += 0.1*sin( u_time + 2.0*uv.y ) ;\n    uv.y += 0.1*sin( u_time + 2.0*uv.x ) ;\n    \n    float a = noise(uv*1.5+sin(0.1*u_time))*6.2831;\n    a += offset;\n    return vec2( cos(a), sin(a) );\n\t}\n\n\tvoid main() {\n\t\n\t//vertex coordinates from vertex shader\n\tvec2 uv = vUv;\n\n\tfloat offset = u_time + gl_FragCoord.x/u_resolution.y;\n    vec2 displacement = displace(uv*10., offset*3.0 );\n    uv += 0.015*displacement;\n\n    //import texture and give it displacement effect\n\tvec4 texture = texture2D(u_texture, uv);\n\n\t//output result\n\tgl_FragColor = vec4(texture);\n}\n`\nexport {\n    fragmentShader\n}\n"]},"metadata":{},"sourceType":"module"}