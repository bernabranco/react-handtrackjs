{"ast":null,"code":"var _jsxFileName = \"/Users/bernardoagbranco/github/react-handtrackjs/src/components/Handtrack.js\",\n    _s = $RefreshSig$();\n\nimport * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Handtrack() {\n  _s();\n\n  var video = document.getElementById(\"video\");\n  var canvas = document.getElementById(\"canvas\");\n  var context = canvas.getContext('2d');\n  var mediasource = video;\n  let myModel = null; //start video stream\n\n  handTrack.startVideo(video); //load tracker model\n\n  const loadTracker = () => {\n    handTrack.load().then(model => {\n      myModel = model;\n      console.log(\"model loaded\");\n      setLoading(1);\n    });\n  }; //run tracker detection\n\n\n  const runTracker = () => {\n    if (myModel != null) {\n      myModel.detect(video).then(predictions => {\n        myModel.renderPredictions(predictions, canvas, context, mediasource);\n      });\n    }\n  }; //render tracker results to canvas\n\n\n  const [loading, setLoading] = useState(0);\n\n  const render = () => {\n    if (loading === 0) loadTracker();\n    var video = document.getElementById(\"video\");\n    video.addEventListener('loadeddata', () => {\n      runTracker();\n    });\n    video.removeEventListener('loadeddata', render);\n  };\n\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTime(time + 1);\n    }, 100);\n    render();\n    return () => clearTimeout(timer);\n  });\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Handtrack, \"OZYTBOKIDk9HhI9paVLnaAhGmPg=\");\n\n_c = Handtrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Handtrack\");","map":{"version":3,"sources":["/Users/bernardoagbranco/github/react-handtrackjs/src/components/Handtrack.js"],"names":["handTrack","React","useEffect","useState","Handtrack","video","document","getElementById","canvas","context","getContext","mediasource","myModel","startVideo","loadTracker","load","then","model","console","log","setLoading","runTracker","detect","predictions","renderPredictions","loading","render","addEventListener","removeEventListener","time","setTime","timer","setTimeout","clearTimeout"],"mappings":";;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAEhC,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,MAAIC,MAAM,GAAGF,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,MAAIE,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd;AACA,MAAIC,WAAW,GAAGN,KAAlB;AACA,MAAIO,OAAO,GAAG,IAAd,CANgC,CAQhC;;AACAZ,EAAAA,SAAS,CAACa,UAAV,CAAqBR,KAArB,EATgC,CAWhC;;AACA,QAAMS,WAAW,GAAG,MAAM;AACtBd,IAAAA,SAAS,CAACe,IAAV,GACKC,IADL,CACUC,KAAK,IAAI;AACXL,MAAAA,OAAO,GAAGK,KAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAC,MAAAA,UAAU,CAAC,CAAD,CAAV;AACH,KALL;AAMH,GAPD,CAZgC,CAqBhC;;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAIT,OAAO,IAAI,IAAf,EAAqB;AACjBA,MAAAA,OAAO,CAACU,MAAR,CAAejB,KAAf,EAAsBW,IAAtB,CAA2BO,WAAW,IAAI;AACtCX,QAAAA,OAAO,CAACY,iBAAR,CAA0BD,WAA1B,EAAuCf,MAAvC,EAA+CC,OAA/C,EAAwDE,WAAxD;AACH,OAFD;AAIH;AACJ,GAPD,CAtBgC,CAgChC;;;AACA,QAAM,CAACc,OAAD,EAAUL,UAAV,IAAwBjB,QAAQ,CAAC,CAAD,CAAtC;;AACA,QAAMuB,MAAM,GAAG,MAAI;AAEf,QAAID,OAAO,KAAK,CAAhB,EAAmBX,WAAW;AAC9B,QAAIT,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACsB,gBAAN,CAAuB,YAAvB,EAAqC,MAAM;AACvCN,MAAAA,UAAU;AACb,KAFD;AAIAhB,IAAAA,KAAK,CAACuB,mBAAN,CAA0B,YAA1B,EAAwCF,MAAxC;AACH,GATD;;AAWA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkB3B,QAAQ,CAAC,CAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM6B,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3BF,MAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACH,KAFuB,EAErB,GAFqB,CAAxB;AAIAH,IAAAA,MAAM;AAEN,WAAO,MAAMO,YAAY,CAACF,KAAD,CAAzB;AACH,GARQ,CAAT;AAUA,sBACI;AAAQ,IAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA3DuB3B,S;;KAAAA,S","sourcesContent":["import * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react'\n\nexport default function Handtrack() {\n\n    var video = document.getElementById(\"video\");\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext('2d')\n    var mediasource = video;\n    let myModel = null;\n\n    //start video stream\n    handTrack.startVideo(video);\n    \n    //load tracker model\n    const loadTracker = () => {\n        handTrack.load()\n            .then(model => {\n                myModel = model;\n                console.log(\"model loaded\");\n                setLoading(1);\n            });\n    }\n\n    //run tracker detection\n    const runTracker = () => {\n        if (myModel != null) {\n            myModel.detect(video).then(predictions => {\n                myModel.renderPredictions(predictions, canvas, context, mediasource);\n            });\n\n        }\n    }\n\n\n    //render tracker results to canvas\n    const [loading, setLoading] = useState(0);\n    const render = ()=>{\n\n        if (loading === 0) loadTracker();\n        var video = document.getElementById(\"video\");\n        video.addEventListener('loadeddata', () => {\n            runTracker();\n        })\n\n        video.removeEventListener('loadeddata', render);\n    }\n\n    const [time, setTime] = useState(0);\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setTime(time+1);\n        }, 100);\n\n        render();\n\n        return () => clearTimeout(timer);\n    })\n\n    return (\n        <canvas id=\"canvas\"></canvas>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}