{"ast":null,"code":"var _jsxFileName = \"/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js\",\n    _s = $RefreshSig$();\n\nimport * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Handtrack() {\n  _s();\n\n  var video = document.getElementById(\"video\");\n  const [loading, setLoading] = useState(0);\n  let myModel = null;\n  handTrack.startVideo(video);\n\n  const loadTracker = () => {\n    handTrack.load().then(model => {\n      myModel = model;\n      console.log(\"model loaded\");\n      setLoading(1);\n    });\n  };\n\n  const runTracker = () => {\n    var video = document.getElementById(\"video\");\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext('2d');\n    var mediasource = video;\n\n    if (myModel != null) {\n      myModel.detect(video).then(predictions => {\n        myModel.renderPredictions(predictions, canvas, context, mediasource);\n      });\n    }\n  };\n\n  useEffect(() => {\n    var video = document.getElementById(\"video\");\n\n    if (loading === 0) {\n      loadTracker();\n    }\n\n    const timer = window.setTimeout(() => {\n      video.addEventListener('loadeddata', () => {\n        runTracker();\n      });\n    }, 200);\n\n    function cleanUp() {\n      window.clearTimeout(timer);\n      video.removeEventListener('loadeddata', runTracker);\n    }\n\n    return () => cleanUp();\n  });\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Handtrack, \"/aRt9E4QV4GHN0+qhOy8f05ZYSY=\");\n\n_c = Handtrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Handtrack\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js"],"names":["handTrack","React","useEffect","useState","Handtrack","video","document","getElementById","loading","setLoading","myModel","startVideo","loadTracker","load","then","model","console","log","runTracker","canvas","context","getContext","mediasource","detect","predictions","renderPredictions","timer","window","setTimeout","addEventListener","cleanUp","clearTimeout","removeEventListener"],"mappings":";;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAEhC,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC;AACA,MAAIO,OAAO,GAAG,IAAd;AAEAV,EAAAA,SAAS,CAACW,UAAV,CAAqBN,KAArB;;AAEA,QAAMO,WAAW,GAAG,MAAM;AACtBZ,IAAAA,SAAS,CAACa,IAAV,GACKC,IADL,CACUC,KAAK,IAAI;AACXL,MAAAA,OAAO,GAAGK,KAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAR,MAAAA,UAAU,CAAC,CAAD,CAAV;AACH,KALL;AAMH,GAPD;;AASA,QAAMS,UAAU,GAAG,MAAM;AAErB,QAAIb,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,QAAIY,MAAM,GAAGb,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,QAAIa,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd;AACA,QAAIC,WAAW,GAAGjB,KAAlB;;AAEA,QAAIK,OAAO,IAAI,IAAf,EAAqB;AACjBA,MAAAA,OAAO,CAACa,MAAR,CAAelB,KAAf,EAAsBS,IAAtB,CAA2BU,WAAW,IAAI;AACtCd,QAAAA,OAAO,CAACe,iBAAR,CAA0BD,WAA1B,EAAuCL,MAAvC,EAA+CC,OAA/C,EAAwDE,WAAxD;AACH,OAFD;AAGH;AACJ,GAZD;;AAcApB,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIG,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;;AAEA,QAAIC,OAAO,KAAK,CAAhB,EAAmB;AACfI,MAAAA,WAAW;AACd;;AAED,UAAMc,KAAK,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;AAClCvB,MAAAA,KAAK,CAACwB,gBAAN,CAAuB,YAAvB,EAAqC,MAAM;AACvCX,QAAAA,UAAU;AACb,OAFD;AAGH,KAJa,EAIX,GAJW,CAAd;;AAMA,aAASY,OAAT,GAAkB;AACdH,MAAAA,MAAM,CAACI,YAAP,CAAoBL,KAApB;AACArB,MAAAA,KAAK,CAAC2B,mBAAN,CAA0B,YAA1B,EAAwCd,UAAxC;AACH;;AAED,WAAO,MAAMY,OAAO,EAApB;AAEH,GArBQ,CAAT;AAuBA,sBACI;AAAQ,IAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAzDuB1B,S;;KAAAA,S","sourcesContent":["import * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react'\n\nexport default function Handtrack() {\n\n    var video = document.getElementById(\"video\");\n    const [loading, setLoading] = useState(0);\n    let myModel = null;\n\n    handTrack.startVideo(video);\n\n    const loadTracker = () => {\n        handTrack.load()\n            .then(model => {\n                myModel = model;\n                console.log(\"model loaded\");\n                setLoading(1);\n            });\n    }\n\n    const runTracker = () => {\n\n        var video = document.getElementById(\"video\");\n        var canvas = document.getElementById(\"canvas\");\n        var context = canvas.getContext('2d')\n        var mediasource = video;\n\n        if (myModel != null) {\n            myModel.detect(video).then(predictions => {\n                myModel.renderPredictions(predictions, canvas, context, mediasource);\n            });\n        }\n    }\n\n    useEffect(() => {\n\n        var video = document.getElementById(\"video\");\n\n        if (loading === 0) {\n            loadTracker();\n        }\n\n        const timer = window.setTimeout(() => {\n            video.addEventListener('loadeddata', () => {\n                runTracker();\n            })\n        }, 200);\n\n        function cleanUp(){\n            window.clearTimeout(timer);\n            video.removeEventListener('loadeddata', runTracker)\n        }\n\n        return () => cleanUp();\n     \n    })\n\n    return (\n        <canvas id=\"canvas\"></canvas>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}