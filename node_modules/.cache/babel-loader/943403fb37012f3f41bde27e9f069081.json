{"ast":null,"code":"var _jsxFileName = \"/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js\",\n    _s = $RefreshSig$();\n\nimport * as handTrack from 'handtrackjs';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Handtrack() {\n  _s();\n\n  var video = document.getElementById(\"video\");\n  let myModel = null;\n  handTrack.startVideo(video);\n  useEffect(() => {\n    if (loadTracker() !== true) {\n      loadTracker();\n    } else {\n      video.addEventListener('loadeddata', () => {\n        runTracker();\n      });\n    }\n  });\n\n  const loadTracker = () => {\n    handTrack.load().then(model => {\n      myModel = model;\n      console.log(\"model loaded\");\n      return true;\n    });\n  };\n\n  const runTracker = () => {\n    var video = document.getElementById(\"video\");\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext('2d');\n    var mediasource = video;\n\n    if (myModel != null) {\n      myModel.detect(video).then(predictions => {\n        console.log('Predictions: ', predictions);\n        myModel.renderPredictions(predictions, canvas, context, mediasource);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Handtrack, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Handtrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Handtrack\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js"],"names":["handTrack","useEffect","Handtrack","video","document","getElementById","myModel","startVideo","loadTracker","addEventListener","runTracker","load","then","model","console","log","canvas","context","getContext","mediasource","detect","predictions","renderPredictions"],"mappings":";;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAEhC,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,MAAIC,OAAO,GAAG,IAAd;AAEAN,EAAAA,SAAS,CAACO,UAAV,CAAqBJ,KAArB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAGO,WAAW,OAAO,IAArB,EAA0B;AAC1BA,MAAAA,WAAW;AACV,KAFD,MAEO;AACHL,MAAAA,KAAK,CAACM,gBAAN,CAAuB,YAAvB,EAAqC,MAAM;AACvCC,QAAAA,UAAU;AACb,OAFD;AAGH;AACJ,GATQ,CAAT;;AAWA,QAAMF,WAAW,GAAG,MAAM;AACtBR,IAAAA,SAAS,CAACW,IAAV,GACKC,IADL,CACUC,KAAK,IAAI;AACXP,MAAAA,OAAO,GAAGO,KAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,aAAO,IAAP;AACH,KALL;AAMH,GAPD;;AASA,QAAML,UAAU,GAAG,MAAM;AAErB,QAAIP,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,QAAIW,MAAM,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,QAAIY,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd;AACA,QAAIC,WAAW,GAAGhB,KAAlB;;AAEA,QAAIG,OAAO,IAAI,IAAf,EAAqB;AACjBA,MAAAA,OAAO,CAACc,MAAR,CAAejB,KAAf,EAAsBS,IAAtB,CAA2BS,WAAW,IAAI;AACtCP,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BM,WAA7B;AACAf,QAAAA,OAAO,CAACgB,iBAAR,CAA0BD,WAA1B,EAAuCL,MAAvC,EAA+CC,OAA/C,EAAwDE,WAAxD;AACH,OAHD;AAIH;AACJ,GAbD;;AAeA,sBACI;AAAQ,IAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA7CuBjB,S;;KAAAA,S","sourcesContent":["import * as handTrack from 'handtrackjs';\nimport { useEffect } from 'react'\n\nexport default function Handtrack() {\n\n    var video = document.getElementById(\"video\");\n    let myModel = null;\n\n    handTrack.startVideo(video);\n\n    useEffect(() => {\n        \n        if(loadTracker() !== true){\n        loadTracker();\n        } else {\n            video.addEventListener('loadeddata', () => {\n                runTracker();\n            })\n        } \n    })\n\n    const loadTracker = () => {\n        handTrack.load()\n            .then(model => {\n                myModel = model;\n                console.log(\"model loaded\")\n                return true;\n            });\n    }\n\n    const runTracker = () => {\n\n        var video = document.getElementById(\"video\");\n        var canvas = document.getElementById(\"canvas\");\n        var context = canvas.getContext('2d')\n        var mediasource = video;\n\n        if (myModel != null) {\n            myModel.detect(video).then(predictions => {\n                console.log('Predictions: ', predictions);\n                myModel.renderPredictions(predictions, canvas, context, mediasource);\n            });\n        }\n    }\n\n    return (\n        <canvas id=\"canvas\"></canvas>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}