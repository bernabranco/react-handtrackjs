{"ast":null,"code":"var _jsxFileName = \"/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js\",\n    _s = $RefreshSig$();\n\nimport * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Handtrack() {\n  _s();\n\n  var video = document.getElementById(\"video\");\n  const [loading, setLoading] = useState(0);\n  let myModel = null;\n  handTrack.startVideo(video);\n  useEffect(() => {\n    var video = document.getElementById(\"video\");\n\n    if (loading === 0) {\n      loadTracker();\n    }\n\n    runTracker();\n  });\n\n  const loadTracker = () => {\n    handTrack.load().then(model => {\n      myModel = model;\n      console.log(\"model loaded\");\n      setLoading(1);\n    });\n  };\n\n  const runTracker = () => {\n    var video = document.getElementById(\"video\");\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext('2d');\n    var mediasource = video;\n\n    if (myModel != null) {\n      myModel.detect(video).then(predictions => {\n        myModel.renderPredictions(predictions, canvas, context, mediasource);\n      });\n    }\n  };\n\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTime(time + 1);\n    }, 2000);\n    return () => clearTimeout(timer);\n  });\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Handtrack, \"jpfbZhfhrf8O1ft/e4fRj2o7LN0=\");\n\n_c = Handtrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Handtrack\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js"],"names":["handTrack","React","useEffect","useState","Handtrack","video","document","getElementById","loading","setLoading","myModel","startVideo","loadTracker","runTracker","load","then","model","console","log","canvas","context","getContext","mediasource","detect","predictions","renderPredictions","time","setTime","timer","setTimeout","clearTimeout"],"mappings":";;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAEhC,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC;AACA,MAAIO,OAAO,GAAG,IAAd;AAEAV,EAAAA,SAAS,CAACW,UAAV,CAAqBN,KAArB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;;AAEA,QAAGC,OAAO,KAAG,CAAb,EAAe;AACfI,MAAAA,WAAW;AACV;;AAGGC,IAAAA,UAAU;AAEjB,GAVQ,CAAT;;AAYA,QAAMD,WAAW,GAAG,MAAM;AACtBZ,IAAAA,SAAS,CAACc,IAAV,GACCC,IADD,CACMC,KAAK,IAAI;AACXN,MAAAA,OAAO,GAAGM,KAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAT,MAAAA,UAAU,CAAC,CAAD,CAAV;AACH,KALD;AAMH,GAPD;;AASA,QAAMI,UAAU,GAAG,MAAM;AAErB,QAAIR,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,QAAIY,MAAM,GAAGb,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,QAAIa,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd;AACA,QAAIC,WAAW,GAAGjB,KAAlB;;AAEA,QAAGK,OAAO,IAAI,IAAd,EAAmB;AACnBA,MAAAA,OAAO,CAACa,MAAR,CAAelB,KAAf,EAAsBU,IAAtB,CAA2BS,WAAW,IAAI;AACtCd,QAAAA,OAAO,CAACe,iBAAR,CAA0BD,WAA1B,EAAuCL,MAAvC,EAA+CC,OAA/C,EAAwDE,WAAxD;AACH,OAFD;AAGH;AACA,GAZD;;AAcA,QAAM,CAACI,IAAD,EAAMC,OAAN,IAAiBxB,QAAQ,CAAC,CAAD,CAA/B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0B,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3BF,MAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACD,KAFqB,EAEnB,IAFmB,CAAxB;AAGE,WAAO,MAAMI,YAAY,CAACF,KAAD,CAAzB;AACL,GALQ,CAAT;AAOA,sBACI;AAAQ,IAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAvDuBxB,S;;KAAAA,S","sourcesContent":["import * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react'\n\nexport default function Handtrack() {\n\n    var video = document.getElementById(\"video\");\n    const [loading, setLoading] = useState(0);\n    let myModel = null;\n\n    handTrack.startVideo(video);\n\n    useEffect(() => {\n        var video = document.getElementById(\"video\");\n        \n        if(loading===0){\n        loadTracker();\n        } \n\n       \n            runTracker(); \n       \n    })\n\n    const loadTracker = () => {\n        handTrack.load()\n        .then(model => {\n            myModel = model;\n            console.log(\"model loaded\");\n            setLoading(1);\n        });\n    }\n\n    const runTracker = () => {\n\n        var video = document.getElementById(\"video\");\n        var canvas = document.getElementById(\"canvas\");\n        var context = canvas.getContext('2d')\n        var mediasource = video;\n\n        if(myModel != null){\n        myModel.detect(video).then(predictions => {\n            myModel.renderPredictions(predictions, canvas, context, mediasource);\n        });\n    }\n    }\n\n    const [time,setTime] = useState(0);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setTime(time+1);\n          }, 2000);\n          return () => clearTimeout(timer);\n    })\n\n    return (\n        <canvas id=\"canvas\"></canvas>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}