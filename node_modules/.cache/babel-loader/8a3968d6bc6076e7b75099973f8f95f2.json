{"ast":null,"code":"var _jsxFileName = \"/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js\",\n    _s = $RefreshSig$();\n\nimport * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Handtrack() {\n  _s();\n\n  var video = document.getElementById(\"video\");\n  var canvas = document.getElementById(\"canvas\");\n  var context = canvas.getContext('2d');\n  var mediasource = video;\n  let myModel = null;\n  handTrack.startVideo(video);\n  useEffect(() => {\n    loadTracker();\n  });\n\n  const loadTracker = () => {\n    handTrack.load().then(model => {\n      myModel = model; // detect objects in the image.\n\n      console.log(\"model loaded\");\n    });\n  };\n\n  const runTracker = () => {\n    if (myModel != null) {\n      myModel.detect(video).then(predictions => {\n        console.log('Predictions: ', predictions);\n        myModel.renderPredictions(predictions, canvas, context, mediasource);\n      });\n    }\n  };\n\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTime(time + 1);\n    }, 2000);\n    return () => clearTimeout(timer);\n  });\n  useEffect(() => {\n    var video = document.getElementById(\"video\");\n    video.addEventListener('loadeddata', () => {\n      runTracker();\n    }, [time]);\n  });\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Handtrack, \"mQd8W88FOPYHfmY1k6XapZnFq8g=\");\n\n_c = Handtrack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Handtrack\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Handtrack.js"],"names":["handTrack","React","useEffect","useState","Handtrack","video","document","getElementById","canvas","context","getContext","mediasource","myModel","startVideo","loadTracker","load","then","model","console","log","runTracker","detect","predictions","renderPredictions","time","setTime","timer","setTimeout","clearTimeout","addEventListener"],"mappings":";;;AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAEhC,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACA,MAAIC,MAAM,GAAGF,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,MAAIE,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd;AACA,MAAIC,WAAW,GAAGN,KAAlB;AACA,MAAIO,OAAO,GAAG,IAAd;AAEAZ,EAAAA,SAAS,CAACa,UAAV,CAAqBR,KAArB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,WAAW;AACd,GAFQ,CAAT;;AAIA,QAAMA,WAAW,GAAG,MAAM;AACtBd,IAAAA,SAAS,CAACe,IAAV,GACCC,IADD,CACMC,KAAK,IAAI;AACXL,MAAAA,OAAO,GAAGK,KAAV,CADW,CAEX;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,KALD;AAMH,GAPD;;AASA,QAAMC,UAAU,GAAG,MAAM;AAErB,QAAGR,OAAO,IAAI,IAAd,EAAmB;AACnBA,MAAAA,OAAO,CAACS,MAAR,CAAehB,KAAf,EAAsBW,IAAtB,CAA2BM,WAAW,IAAI;AACtCJ,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,WAA7B;AACAV,QAAAA,OAAO,CAACW,iBAAR,CAA0BD,WAA1B,EAAuCd,MAAvC,EAA+CC,OAA/C,EAAwDE,WAAxD;AACH,OAHD;AAIH;AACA,GARD;;AAUA,QAAM,CAACa,IAAD,EAAMC,OAAN,IAAiBtB,QAAQ,CAAC,CAAD,CAA/B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3BF,MAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACD,KAFqB,EAEnB,IAFmB,CAAxB;AAGE,WAAO,MAAMI,YAAY,CAACF,KAAD,CAAzB;AACL,GALQ,CAAT;AAQAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACwB,gBAAN,CAAuB,YAAvB,EAAqC,MAAM;AACvCT,MAAAA,UAAU;AACb,KAFD,EAEE,CAACI,IAAD,CAFF;AAIH,GANQ,CAAT;AAQA,sBACI;AAAQ,IAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAtDuBpB,S;;KAAAA,S","sourcesContent":["import * as handTrack from 'handtrackjs';\nimport { React, useEffect, useState } from 'react'\n\nexport default function Handtrack() {\n\n    var video = document.getElementById(\"video\");\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext('2d')\n    var mediasource = video;\n    let myModel = null;\n\n    handTrack.startVideo(video);\n\n    useEffect(() => {\n        loadTracker();\n    })\n\n    const loadTracker = () => {\n        handTrack.load()\n        .then(model => {\n            myModel = model;\n            // detect objects in the image.\n            console.log(\"model loaded\")\n        });\n    }\n\n    const runTracker = () => {\n\n        if(myModel != null){\n        myModel.detect(video).then(predictions => {\n            console.log('Predictions: ', predictions);\n            myModel.renderPredictions(predictions, canvas, context, mediasource);\n        });\n    }\n    }\n\n    const [time,setTime] = useState(0);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setTime(time+1);\n          }, 2000);\n          return () => clearTimeout(timer);\n    })\n\n\n    useEffect(() => {\n        var video = document.getElementById(\"video\");\n        video.addEventListener('loadeddata', () => {\n            runTracker(); \n        },[time]);\n     \n    })\n\n    return (\n        <canvas id=\"canvas\"></canvas>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}