{"ast":null,"code":"const fragment = `\nprecision mediump float;\n\n#define PI 3.1415926538\n\n\tuniform float u_time;\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform sampler2D u_texture;\n\tvarying vec2 vUv;\n\n\tfloat random (in vec2 st) {\n\t\treturn fract(sin(dot(st.xy,\n\t\t\t\t\t\t\t vec2(12.9898,78.233)))\n\t\t\t\t\t* 43758.5453123);\n\t}\n\t\n\t// Value noise by Inigo Quilez - iq/2013\n\t// https://www.shadertoy.com/view/lsf3WH\n\tfloat noise(vec2 st) {\n\t\tvec2 i = floor(st);\n\t\tvec2 f = fract(st);\n\t\tvec2 u = f*f*(3.0-2.0*f);\n\t\treturn mix( mix( random( i + vec2(0.0,0.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,0.0) ), u.x),\n\t\t\t\t\tmix( random( i + vec2(0.0,1.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,1.0) ), u.x), u.y);\n\t}\n\n\tvec2 rotate(vec2 v, float a) {\n        float s = sin(a);\n        float c = cos(a);\n        mat2 m = mat2(c, -s, s, c);\n        return m * v;\n    }\n    \n    vec2 radial(vec2 uv){\n    \n        float angle = atan(uv.x,-uv.y);\n        angle = abs(angle);\n        vec2 radialUv = vec2(0.0);\n        radialUv.x = angle/(PI*1.);\n        radialUv.y = 1.0 - pow(1.0 - length(uv), 1.0);\n      \n        return radialUv;\n    }\n    \n    \n    void main() {\n      \n      float time = u_time*0.2;\n      \n      //center uv\n      vec2 uv = vUv;\n    \n      //tranform to radial coordinates\n      vec2 coord = radial(uv)*5.0;\n      \n      //rotate coord\n      coord = rotate(coord,5.);\n      \n      //displace coordinates\n      for (float i = 0.5; i<2.0; i+=0.1){\n        coord.x +=  0.100*sin(coord.y*i*40. + time);\n        coord.y +=  0.10*tan(fract(coord.x*i*0.5+time) + 49.6);\n      }\n        \n      //get length between coord x and y\n      float len = length(coord);\n\n      vec4 texture = texture2D(u_texture,uv);\n      \n      //output final color\n      gl_FragColor = vec4(texture.xyz, 1.0);\n    \n    }\n`;\nexport { fragment };","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/fragmentShader.js"],"names":["fragment"],"mappings":"AAAA,MAAMA,QAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA5EA;AA6EA,SACIA,QADJ","sourcesContent":["const fragment = `\nprecision mediump float;\n\n#define PI 3.1415926538\n\n\tuniform float u_time;\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform sampler2D u_texture;\n\tvarying vec2 vUv;\n\n\tfloat random (in vec2 st) {\n\t\treturn fract(sin(dot(st.xy,\n\t\t\t\t\t\t\t vec2(12.9898,78.233)))\n\t\t\t\t\t* 43758.5453123);\n\t}\n\t\n\t// Value noise by Inigo Quilez - iq/2013\n\t// https://www.shadertoy.com/view/lsf3WH\n\tfloat noise(vec2 st) {\n\t\tvec2 i = floor(st);\n\t\tvec2 f = fract(st);\n\t\tvec2 u = f*f*(3.0-2.0*f);\n\t\treturn mix( mix( random( i + vec2(0.0,0.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,0.0) ), u.x),\n\t\t\t\t\tmix( random( i + vec2(0.0,1.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,1.0) ), u.x), u.y);\n\t}\n\n\tvec2 rotate(vec2 v, float a) {\n        float s = sin(a);\n        float c = cos(a);\n        mat2 m = mat2(c, -s, s, c);\n        return m * v;\n    }\n    \n    vec2 radial(vec2 uv){\n    \n        float angle = atan(uv.x,-uv.y);\n        angle = abs(angle);\n        vec2 radialUv = vec2(0.0);\n        radialUv.x = angle/(PI*1.);\n        radialUv.y = 1.0 - pow(1.0 - length(uv), 1.0);\n      \n        return radialUv;\n    }\n    \n    \n    void main() {\n      \n      float time = u_time*0.2;\n      \n      //center uv\n      vec2 uv = vUv;\n    \n      //tranform to radial coordinates\n      vec2 coord = radial(uv)*5.0;\n      \n      //rotate coord\n      coord = rotate(coord,5.);\n      \n      //displace coordinates\n      for (float i = 0.5; i<2.0; i+=0.1){\n        coord.x +=  0.100*sin(coord.y*i*40. + time);\n        coord.y +=  0.10*tan(fract(coord.x*i*0.5+time) + 49.6);\n      }\n        \n      //get length between coord x and y\n      float len = length(coord);\n\n      vec4 texture = texture2D(u_texture,uv);\n      \n      //output final color\n      gl_FragColor = vec4(texture.xyz, 1.0);\n    \n    }\n`\nexport {\n    fragment\n}\n"]},"metadata":{},"sourceType":"module"}